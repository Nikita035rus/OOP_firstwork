Задача – реализовать систему запрос-ответ, которая представляет собой следующее. Система – автоматизированное управление книгами (доступ, загрузка, удаление и т.д.). 
Как это должно быть реализовано:
Клиент вводит запрос (консольный ввод), запрос поступает в специальный обработчик (Controller). Исходя из заголовка запроса, вызывается тот или иной метод контроллера.
В контроллере вызывается логика приложения – методы класса Service. Сервис – специальный класс, содержащий логику приложения (обработка различных ситуаций): сервис вызывает методы другого класса – Repositoty (репозиторий).
Репозиторий - специальная прослойка, которая отвечает исключительно за доступ к данным (база данных или иное хранилище). В качестве базы данных нужно использовать коллекцию (JavaCollection на выбор).

Пример работы всей системы в целом:
1.	Запрос от клиента (консольный ввод). Например: “find_book?name=Java8“ (означает следующее: получить книгу с названием «Java8»). Параметры запроса (например, название книги, передается после вопросительного знака, далее указывается название параметра: name, далее ставится равно, после равно пишет значение параметра).
2.	Запрос передается в контроллер. Контроллер обрабатывает запрос – проверяет, допустимый ли запрос сделал клиент. Если допустимый: вызывает соответствующий метод класса Service, в нашем примере – findBookByName(String name).
Если клиент выполнил некорректный запрос – кинуть непроверяемое исключение. Исключение создать самостоятельно (свой класс). Имя исключения должно быть логически верным для данной ситуации (InvalidRequestException, например; главное требование – на конце Exception, название – понятное другим людям). Клиент должен получить это исключение без стек трейса – он должен понять, что сделал не так.
3.	 Если контроллер обработал запрос как корректный, то вызывается метод класса Service. В нашем примере – findBookByName(String name). Что делает сервис: вызывает метод из класса Repository (например, тоже findBookByName (String name)).
4.	Метод из Repository возвращает Optional: книга могла найтись (книга с таким названием есть), или могла не найтись (такой книги нет в наличии). Однако клиенту нужно именно название книги. Поэтому Service проверяет Optional. Если книга была найдена в хранилище (поиск по коллекции, вся логика работы с хранилищем – только в классе Repository) – возвращается соответствующий объект класса Book, иначе (пустой Optional) сервис бросает соответствующее исключение (создать самостоятельно).
5.	Book имеет следующую структуру: int id, String author, String name, int price. Коллекция (хранилище) содержит именно объекты класса Book. Поле id назначается автоматически, начиная с 1. Поле name – уникальное, не может быть двух книг с одним и тем же названием.
Первая книга, сохраненная в коллекции, будет с id = 1, вторая – id=2 и т.д., каждая новая книга будет опираться на предыдущее значение. При удалении: были 4 книги (id=1, id=2, id=3). Удалили книгу с id=3 (id=1, id=2). Далее добавили новую книгу, id=3 не перезаписывается, а начинается с 4 (id=1, id=2, id=4 –id=3 уже был удален, он больше не используется).

Какие методы должны быть реализованы для Repository:
•	Optional findBookByName(String name)
•	List findAllBooks() – возвращает все книги из хранилища.
•	List findBookWherePriceBetween(int from, int to) – возвращает список книг, у которых цена принадлежит указанному диапазону (запрос пользователя: find_books_price_between?from=100&to=200).
•	Book saveBook(Book book) – добавляет новую книгу в хранилище. Возвращает сохраненную книгу (уже с id).
•	Book updateBookById(intid, Book newBook) – обновлении книги по id. Не удаляет старую книгу, а обновляет ее поля через сеттеры. Возвращает обновленную книгу.
•	void deleteBookByName(String name) – удаляет книгу по названию.
•	void deleteAll() – удаляет все книги. Обнуляет счетчик id.

Для каждого метода из Repository создается свой метод класса Service(7 методов в репозитории, 7 методов в сервисе).
Как реализуются методы в классе Service:
•	Book saveBook(String author, String name, int price). Создается объект класса Book и передается в метод saveBook репозитория.
•	BookupdateBook(int id, String author, String name, int price) – книга ищется по id (дополнительный метод в репозитории – findBookById, в сервисе необязателен данный отдельный метод). Если книги с таким idнет, то бросается исключение. Если книга найдена – создается объект класса Bookи передается в updateBookметод класса Repository.
•	Остальные методы – ничего необычного.

Также под каждый запрос пользователя создается свой метод в классе Controller. Запрос обрабатывается и вызывается соответствующий метод класса Service.

Требования к проекту:
1.	Все классы должны называться осмысленно (как и поля, переменные и прочее). 
2.	Логически не связанные между собой классы должны размещаться в своих пакетах (packageservice, repository, entity (Book), controller и тд.).
3.	Запуск приложения происходит в отдельном классе. В этом классе всего одна строчка в методе main–запуск приложения (остальное выполняется в отдельных классах).
4.	Пользователь должен вводить все параметры. Пример: запрос «Сохранить книгу»: save_book?author=Schildt&name=Programming_on_Java&cost=100. Вся строка с тремя обязательными параметрами. Если параметр состоит из нескольких слов, то они разделяются нижними подчеркиваниями. Методы класса Service должны заменять нижние подчеркивания пробелами.
5.	Если какой-либо параметр не указан, кидается исключение (не должно быть null параметров, а также некорректных запросов).
6.	Класс Репозиторий работает только с хранилищем.
7.	Класс Сервис работает с Репозиторием, содержит дополнительную логику (проброс исключений – throw).
8.	Класс Контроллер работает с классом Сервис.
9.	После обновления книги или сохранения книги пользователю возвращается полная информацию о книге: id, author, name, cost (либо сообщение о том, что книга не найдена – в случае, если такого id нет в хранилище. Эта информация берется из исключения).
10.	После удаления книг возвращается информация: deleteByName–удалось или не удалось обновить книгу (эта информация берется из исключения), deleleAll–количество удаленных книг.

